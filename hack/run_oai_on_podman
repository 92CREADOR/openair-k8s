#!/bin/bash

source /etc/os-release
PLATFORM=${PLATFORM:-${ID#rh*}${VERSION_ID%.*}}
REGISTRY=${REGISTRY:-registry.redhat.io}
IMAGES=$(find images -type f -name Dockerfile* | sed 's|images/||g' | sed 's|/Dockerfile[a-z0-9.]*||g' | sort | uniq | xargs)
COMPONENTS="HSS MME SPGW ENB GNB"

info() {
    local MESSAGE=$1

    echo -e "\E[34m\n== $MESSAGE\E[00m";
}

usage() {
    echo "Runs the specified (set of) OAI components locally on Podman for testing purposes (default: all components).
    
usage: $(basename $0) [-h] [COMPONENT1 [COMPONENT2 [...]]]
  -h|--help:        prints this help message
  
available components:
  ${COMPONENTS}"
    exit 1
}

wait_until_running() {
    local CONTAINER_NAME=$1

    TIMEOUT=30
    until [ "$(podman inspect -t container -f {{.State.Running}} ${CONTAINER_NAME})" == "true" ] || [ $TIMEOUT -le 0 ]; do
        echo -ne "  Waiting ${TIMEOUT}s for $CONTAINER_NAME to transition to state Running.\033[0K\r"
        sleep 1;
        (( TIMEOUT-- ))
    done
    if [ $TIMEOUT -le 0 ]; then
        info "$CONTAINER_NAME failed to start."
        exit 1
    fi
}

wait_for_socket() {
    local HOST=$1
    local PORT=$2

    TIMEOUT=120
    until nc -z $HOST $PORT || [ $TIMEOUT -le 0 ]; do
        echo -ne "  Waiting ${TIMEOUT}s for port $PORT on host $HOST to open.\033[0K\r"
        sleep 1;
        (( TIMEOUT-- ))
    done
    if [ $TIMEOUT -le 0 ]; then
        info "Port $PORT on host $HOST failed to open."
        exit 1
    fi
}

run_component() {
    local IMAGE=$1
    local CONTAINER_NAME=$2
    local LIVENESS_IP=${3%:*}
    local LIVENESS_PORT=${3#*:}

    if [ "$(podman ps -a -q -f name=$CONTAINER_NAME)" ]; then
        if [ "$(podman inspect -f {{.State.Running}} ${CONTAINER_NAME})" == "true" ]; then
             info "$CONTAINER_NAME container already running."
             return
        fi
        info "Removing existing $CONTAINER_NAME container."
        podman rm -f $CONTAINER_NAME 2> /dev/null
    fi

    info "Starting $CONTAINER_NAME container."
    shift 3 # remove image, liveness port, and container name from args
    echo -ne "podman run -d --net=host --name $CONTAINER_NAME $@ $IMAGE\n"
    podman run -d --net=host --name $CONTAINER_NAME "$@" $IMAGE

    # block until container is running and service binds to port
    wait_until_running $CONTAINER_NAME
    wait_for_socket $LIVENESS_IP $LIVENESS_PORT
}

# parse command line args
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
        usage
        ;;
        *) # unknown option
        POSITIONAL+=("$key") # save it in an array for later
        shift # past argument
        ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# if there are positional args, interpret them as list of components to run
if [ $# -ne 0 ]; then
  COMPONENTS=$*
fi
COMPONENTS=${COMPONENTS^^}


if [[ "${COMPONENTS}" =~ "HSS" ]]; then
    run_component cassandra:3.11 cassandra 127.0.0.1:9042 \
        -e CASSANDRA_DC=DC1 \
        -e CASSANDRA_RACK=RACK1 \
        -e CASSANDRA_CLUSTER_NAME=OAI_HSS \
        -e CASSANDRA_ENDPOINT_SNITCH="GossipingPropertyFileSnitch" \
        -p 127.0.0.1:9042:9042 
    CASSANDRA_IP=`sudo podman exec -it cassandra ip -4 addr show  scope global | awk '$1 == "inet" {print $2}' | xargs | cut -d '/' -f1`

    info 'Provisioning...(Datacenter name is hardcoded in CQL)'
    IP_CASSANDRA=`sudo podman exec -it cassandra ip -4 addr show  scope global | awk '$1 == "inet" {print $2}' | xargs | cut -d '/' -f1`
    SCRIPT=$(readlink -f $0)
    THIS_SCRIPT_PATH=`dirname $SCRIPT`
    PROVISION_SCRIPT=$THIS_SCRIPT_PATH/../images/oai-cassandra/scripts/init_prov.sh    
    $PROVISION_SCRIPT -n cassandra -i $CASSANDRA_IP
    info 'Provisioning done'

    run_component oai-hss_rel14:k8s oai-hss 127.0.0.1:3868 \
        -e DB_FQDN=${CASSANDRA_IP} \
        -e DB_NAME=vhss \
        -e DB_USER=cassandra \
        -e DB_PASSWORD=cassandra \
        -e OP_KEY="11111111111111111111" \
        -e HSS_FQDN="hss.openair4G.eur" \
        -e ROAMING_ALLOWED="true" \
        -p 3868:3868 -p 5868:5868 -p 9080:9080 -p 9081:9081 \
        -v ${PWD}/manifests/oai-hss/certs:/opt/oai-hss/certs:Z \
        -h hss.openair4G.eur
    HSS_IP=`sudo podman exec -it oai-hss_rel14 ip -4 addr show  scope global | awk '$1 == "inet" {print $2}' | xargs | cut -d '/' -f1`
fi

if [[ "${COMPONENTS}" =~ "SPGW" ]]; then
# # Make your choice , should launch a script to retrieve the interface name
# CONTAINER_INTERFACE='ens192'
# #CONTAINER_INTERFACE='eno1'
# #CONTAINER_INTERFACE='eth0'
# # Commented due to  podman run --net=host (Same port binding for S11, SX)
# #run_component oai-spgwc:develop oai-spgwc 127.0.0.1:2123 \
# #    -e SGW_S11_INTERFACE="$CONTAINER_INTERFACE" \
# #    -e PGW_SX_INTERFACE="$CONTAINER_INTERFACE" \
# #    -e UE_IP_ADDRESS_POOL="10.0.23.1 - 10.0.23.240" \
# #    -e UE_DNS_SERVER="8.8.8.8" \
# #    -p 2123:2123 -p 8805:8805 \
# #    -h spgwc.openair4G.eur
# #PGWC_SX_IP_ADDRESS=`sudo podman exec -it oai-spgwc ip -4 addr show  scope global | awk '$1 == "inet" {print $2}' | xargs | cut -d '/' -f1`
# #SGWC_IP=`sudo podman exec -it oai-spgwc ip -4 addr show  scope global | awk '$1 == "inet" {print $2}' | xargs | cut -d '/' -f1`

# # Hardcoded due to  podman run --net=host 
# PGWC_SX_IP_ADDRESS="192.168.104.200"
# SGWC_IP="192.168.104.199"

# run_component oai-spgwu:develop oai-spgwu 127.0.0.1:2123 \
#     -e SGW_S1U_INTERFACE="$CONTAINER_INTERFACE" \
#     -e SGW_SX_INTERFACE="$CONTAINER_INTERFACE" \
#     -e PGW_SGI_INTERFACE="$CONTAINER_INTERFACE" \
#     -e NETWORK_UE_IP="10.0.23.0/24" \
#     -e PGWC_SX_IP_ADDRESS="$PGWC_SX_IP_ADDRESS" \
#     -p 2123:2123 -p 8805:8805 \
#     -h spgwu.openair4G.eur
fi

if [[ "${COMPONENTS}" =~ "MME" ]]; then
# run_component oai-mme:k8s oai-mme 127.0.0.1:3870 \
#     -e MY_POD_IP="192.168.104.195" \
#     -e MME_SERVICE="mme.openair4G.eur" \
#     -e MME_REALM="openair4G.eur" \
#     -e MME_GID="4" \
#     -e MME_CODE="1" \
#     -e MCC="208" \
#     -e MNC="92" \
#     -e NW_IF="$CONTAINER_INTERFACE" \
#     -e TAC="1" \
#     -e SGW_IP="$SGWC_IP" \
#     -e HSS_SERVICE="hss.openair4G.eur" \
#     -e HSS_IP="$HSS_IP" \
#     -e HSS_REALM="openair4G.eur" \
#     -e HSS_HOSTNAME="hss" \
#     -p 3870:3870 -p 5870:5870 -p 2123:2123 \
#     -v ${PWD}/manifests/oai-mme/certs:/opt/oai-mme/certs:Z \
#     -h mme.openair4G.eur
fi

if [[ "${COMPONENTS}" =~ "ENB" ]]; then
    run_component oai-enb:1.1.0 oai-enb-rcc 127.0.0.1:2152 \
        --cap-add=SYS_NICE \
        -e MODE="RCC" \
        -e ENB_ID=42 \
        -e ENB_NAME="eNB" \
        -e TAC=1 \
        -e MCC=200 \
        -e MNC=92 \
        -e MME_IP4="127.0.0.1" \
        -e MME_IP6="::1" \
        -e S1_MME_IF="lo" \
        -e S1_MME_IP="127.0.0.1" \
        -e S1_U_IF="lo" \
        -e S1_U_IP="127.0.0.1" \
        -e X2C_IP="127.0.0.1" \
        -e RU_LOCAL_IF="lo" \
        -e RU_LOCAL_IP="127.0.0.1" \
        -e RU_REMOTE_IP="127.0.0.1" \
        -p 2152:2152 -p 22100:22100 -p 36422:36422

    run_component oai-enb:1.1.0 oai-enb-rru 127.0.0.1:2152 \
        --cap-add=SYS_NICE \
        -e MODE="RRU" \
        -e RU_LOCAL_IF="lo" \
        -e RU_LOCAL_IP="127.0.0.1" \
        -e RU_REMOTE_IP="127.0.0.1" \
        -p 2152:2152 -p 22100:22100 -p 36422:36422
fi

if [[ "${COMPONENTS}" =~ "GNB" ]]; then
    run_component oai-gnb:develop-nr.${PLATFORM} oai-gnb 127.0.0.1:2152 \
        --privileged --cap-add=SYS_RAWIO --cap-add=SYS_NICE --cap-add=IPC_LOCK \
        --device=/dev/cpu_dma_latency:/dev/cpu_dma_latency \
        -e GNB_ID=0xe00 \
        -e GNB_NAME="gNB-Eurecom-5GNRBox" \
        -e TAC=1 \
        -e MCC=208 \
        -e MNC=93 \
        -e MME_IP4="192.168.12.26" \
        -e MME_IP6="192:168:30::17" \
        -e S1_MME_IF="eth0" \
        -e S1_MME_IP="192.168.12.111/24" \
        -e S1_U_IF="lo" \
        -e S1_U_IP="127.0.0.1" \
        -e SDR_FIRST_IP="192.168.20.2" \
        -e SDR_SECOND_IP="192.168.10.2" \
        -e SDR_MGMT_IP="192.168.20.2" \
        -p 2152:2152
fi

if [[ "${COMPONENTS}" =~ "NR-UE" ]]; then
    # run_component oai-nrue:develop-nr.${PLATFORM} oai-nrue 127.0.0.1:2152 \
    #     --privileged --cap-add=SYS_RAWIO --cap-add=SYS_NICE --cap-add=IPC_LOCK \
    #     --device=/dev/cpu_dma_latency:/dev/cpu_dma_latency \
    #     -e GNB_ID=42 \
    #     -e GNB_NAME="eNB" \
    #     -e MCC=42 \
    #     -e MNC=42 \
    #     -e MME_IP4="127.0.0.1" \
    #     -e MME_IP6="::1" \
    #     -e S1_MME_IF="lo" \
    #     -e S1_MME_IP="127.0.0.1" \
    #     -e S1_U_IF="lo" \
    #     -e S1_U_IP="127.0.0.1" \
    #     -e SDR_FIRST_IP="127.0.0.1" \
    #     -e SDR_SECOND_IP="127.0.0.2" \
    #     -e SDR_MGMT_IP="127.0.0.3" \
    #     -p 2152:2152
fi

info "All services started."
