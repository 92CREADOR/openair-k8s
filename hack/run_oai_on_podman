#!/bin/bash

info() {
    local MESSAGE=$1

    echo -e "\E[34m\n== $MESSAGE\E[00m";
}

wait_until_running() {
    local CONTAINER_NAME=$1

    TIMEOUT=30
    until [ "$(podman inspect -t container -f {{.State.Running}} ${CONTAINER_NAME})" == "true" ] || [ $TIMEOUT -le 0 ]; do
        echo -ne "  Waiting ${TIMEOUT}s for $CONTAINER_NAME to transition to state Running.\033[0K\r"
        sleep 1;
        (( TIMEOUT-- ))
    done
    if [ $TIMEOUT -le 0 ]; then
        info "$CONTAINER_NAME failed to start."
        exit 1
    fi
}

wait_for_socket() {
    local HOST=$1
    local PORT=$2

    TIMEOUT=30
    until nc -z $HOST $PORT || [ $TIMEOUT -le 0 ]; do
        echo -ne "  Waiting ${TIMEOUT}s for port $PORT on host $HOST to open.\033[0K\r"
        sleep 1;
        (( TIMEOUT-- ))
    done
    if [ $TIMEOUT -le 0 ]; then
        info "Port $PORT on host $HOST failed to open."
        exit 1
    fi
}

run_component() {
    local IMAGE=$1
    local LIVENESS_PORT=$2

    local CONTAINER_NAME=${IMAGE%:*}
    if [ "$(podman ps -a -q -f name=$CONTAINER_NAME)" ]; then
        if [ "$(podman inspect -f {{.State.Running}} ${CONTAINER_NAME})" == "true" ]; then
             info "$CONTAINER_NAME container already running."
             return
        fi
        info "Removing existing $CONTAINER_NAME container."
        podman rm -f mariadb 2> /dev/null
    fi

    info "Starting $CONTAINER_NAME container."
    shift 2 # remove image and liveness port from args
    echo -ne "podman run -d --net=host --name $CONTAINER_NAME $@ $IMAGE\n"
    podman run -d --net=host --name $CONTAINER_NAME "$@" $IMAGE

    # block until container is running and service binds to port
    wait_until_running $CONTAINER_NAME
    wait_for_socket 127.0.0.1 $LIVENESS_PORT
}

# for pre-Rel14 HSS
# run_component mariadb:10.2 3306 \
#     -e MYSQL_DB=db \
#     -e MYSQL_USER=user \
#     -e MYSQL_PASSWORD=userpass \
#     -e MYSQL_ROOT_PASSWORD=rootpass \
#     -p 3306:3306

# run_component oai-hss:1.0.1 3868 \
#     -e MYSQL_SERVER=127.0.1.1 \
#     -e MYSQL_DATABASE=hss_db \
#     -e MYSQL_USER=root \
#     -e MYSQL_PASSWORD=rootpass \
#     -e HSS_OP_KEY="11111111111111111111" \
#     -e HSS_SERVICE="hss.openair4G.eur" \
#     -e HSS_REALM="openair4G.eur" \
#     -p 3868:3868 -p 5868:5868 \
#     -v ${PWD}/manifests/oai-hss/certs:/opt/oai-hss/certs:Z \
#     -h hss.openair4G.eur

run_component cassandra:3.11 9042 \
    -e CASSANDRA_DC=DC1 \
    -e CASSANDRA_RACK=RACK1 \
    -e CASSANDRA_CLUSTER_NAME=OAI_HSS \
    -e CASSANDRA_ENDPOINT_SNITCH="GossipingPropertyFileSnitch" \
    -p 9042:9042 

info 'Provisioning...(Datacenter name is hardcoded in CQL)'
IP_CASSANDRA=`sudo podman exec -it cassandra ip -4 addr show  scope global | awk '$1 == "inet" {print $2}' | xargs | cut -d '/' -f1`
SCRIPT=$(readlink -f $0)
THIS_SCRIPT_PATH=`dirname $SCRIPT`
PROVISION_SCRIPT=$THIS_SCRIPT_PATH/../images/oai-cassandra/scripts/init_prov.sh    
$PROVISION_SCRIPT -n cassandra -i $IP_CASSANDRA
info 'Provisioning done'
    
run_component oai-hss_rel14:k8s 3868 \
    -e DB_FQDN=$IP_CASSANDRA \
    -e DB_NAME=vhss \
    -e DB_USER=cassandra \
    -e DB_PASSWORD=cassandra \
    -e OP_KEY="11111111111111111111" \
    -e HSS_FQDN="hss.openair4G.eur" \
    -e ROAMING_ALLOWED="true" \
    -p 3868:3868 -p 5868:5868 -p 9080:9080 -p 9081:9081 \
    -v ${PWD}/manifests/oai-hss/certs:/opt/oai-hss/certs:Z \
    -h hss.openair4G.eur

#run_component oai-mme:1.0.1 3870 \
#    -e MY_POD_IP="127.0.1.1" \
#    -e MME_SERVICE="mme.openair4G.eur" \
#    -e MME_REALM="openair4G.eur" \
#    -e MME_GID="4" \
#    -e MME_CODE="1" \
#    -e MCC="208" \
#    -e MNC="92" \
#    -e TAC="1" \
#    -e SGW_IP="sgw.openair4G.eur" \
#    -e HSS_SERVICE="hss.openair4G.eur" \
#    -e HSS_REALM="openair4G.eur" \
#    -e HSS_HOSTNAME="hss" \
#    -p 3870:3870 -p 5870:5870 -p 2123:2123 \
#    -v ${PWD}/manifests/oai-mme/certs:/opt/oai-mme/certs:Z \
#    -h mme.openair4G.eur

#run_component oai-spgwc:1.0.0 2123 \
#    -e SGW_S11_INTERFACE="eno1" \
#    -e SGW_S5S8_INTERFACE="eno1" \
#    -e PGW_S5S8_INTERFACE="eno1" \
#    -e PGW_SX_INTERFACE="eno1" \
#    -e UE_IP_ADDRESS_POOL="10.0.23.1 - 10.0.23.240" \
#    -e UE_DNS_SERVER="8.8.8.8" \
#    -p 2123:2123 -p 8805:8805 \
#    -h spgwc.openair4G.eur

info "All services started."
